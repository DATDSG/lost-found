# ================================================================
# Vision Service Dockerfile - GPU Version (Full ML Features)
# ================================================================
# WARNING: Image size: 12-15GB+ (requires NVIDIA Docker runtime)
# Includes: YOLO, OCR, CLIP, PyTorch with CUDA
# For CPU-only lightweight version, use Dockerfile
# ================================================================

FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04

# Install Python 3.11 and system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 \
    python3.11-dev \
    python3-pip \
    build-essential \
    gcc \
    g++ \
    git \
    curl \
    libjpeg-dev \
    zlib1g-dev \
    libgl1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    libglu1-mesa \
    libxi6 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1

WORKDIR /app

# Copy requirements
COPY requirements-gpu.txt requirements.txt ./

# Install dependencies in stages
RUN pip install --no-cache-dir --upgrade pip wheel

# 1. Install lightweight dependencies
RUN pip install --no-cache-dir \
    fastapi==0.109.0 \
    uvicorn[standard]==0.27.0 \
    python-multipart==0.0.6 \
    pydantic==2.5.3 \
    Pillow==10.1.0 \
    ImageHash==4.3.1 \
    opencv-python-headless==4.8.1.78 \
    numpy==1.24.3 \
    redis==5.0.1 \
    prometheus-client==0.19.0 \
    slowapi==0.1.9 \
    arq==0.25.0 \
    requests==2.31.0

# 2. Install PyTorch with CUDA support (largest dependency)
RUN pip install --no-cache-dir \
    torch==2.1.0 \
    torchvision==0.16.0 \
    --index-url https://download.pytorch.org/whl/cu118

# 3. Install computer vision models
RUN pip install --no-cache-dir \
    ultralytics==8.0.220 \
    transformers==4.37.2 \
    scikit-learn==1.3.2 \
    easyocr==1.7.1

# 4. Install CLIP (from GitHub)
RUN pip install --no-cache-dir git+https://github.com/openai/CLIP.git

# Copy application code
COPY . /app

# Pre-download models during build (optional but recommended)
# Uncomment to bake models into image
# RUN python -c "from ultralytics import YOLO; YOLO('yolov8n.pt')"
# RUN python -c "import easyocr; reader = easyocr.Reader(['en'])"

# Create cache directory
RUN mkdir -p /root/.cache/torch/hub/checkpoints

# Expose port
EXPOSE 8002

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8002/health || exit 1

# Environment variables
ENV PATH=/root/.local/bin:$PATH \
    PYTHONUNBUFFERED=1 \
    USE_GPU=true \
    CUDA_VISIBLE_DEVICES=0 \
    ENABLE_METRICS=true \
    ENABLE_RATE_LIMIT=true \
    ENABLE_OBJECT_DETECTION=true \
    ENABLE_OCR=true \
    ENABLE_CLIP=true \
    ENABLE_NSFW_DETECTION=true \
    LOG_LEVEL=INFO \
    REDIS_URL=redis://redis:6379

# Run application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002", "--workers", "1"]
