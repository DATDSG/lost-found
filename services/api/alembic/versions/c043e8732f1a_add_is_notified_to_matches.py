"""add_is_notified_to_matches

Revision ID: c043e8732f1a
Revises: a74799b92e96
Create Date: 2025-10-22 13:37:19.687139

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c043e8732f1a'
down_revision: Union[str, None] = 'a74799b92e96'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_logs',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('resource_type', sa.String(), nullable=True),
    sa.Column('resource_id', sa.String(), nullable=True),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_id'), 'audit_logs', ['resource_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_type'), 'audit_logs', ['resource_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.drop_index('ix_media_report_id', table_name='media')
    op.drop_table('media')
    op.drop_index('ix_matches_candidate_report_id', table_name='matches')
    op.drop_index('ix_matches_score_total', table_name='matches')
    op.drop_index('ix_matches_source_report_id', table_name='matches')
    op.drop_index('ix_matches_status', table_name='matches')
    op.drop_table('matches')
    op.drop_index('ix_reports_category', table_name='reports')
    op.drop_index('ix_reports_created_at', table_name='reports')
    op.drop_index('ix_reports_is_resolved', table_name='reports')
    op.drop_index('ix_reports_location_city', table_name='reports')
    op.drop_index('ix_reports_owner_id', table_name='reports')
    op.drop_index('ix_reports_status', table_name='reports')
    op.drop_index('ix_reports_type', table_name='reports')
    op.drop_table('reports')
    op.drop_table('colors')
    op.drop_index('ix_audit_log_created_at', table_name='audit_log')
    op.drop_table('audit_log')
    op.drop_table('categories')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sort_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='categories_pkey')
    )
    op.create_table('audit_log',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('actor_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('resource', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['users.id'], name='audit_log_actor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='audit_log_pkey')
    )
    op.create_index('ix_audit_log_created_at', 'audit_log', ['created_at'], unique=False)
    op.create_table('colors',
    sa.Column('id', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('hex_code', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('sort_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='colors_pkey')
    )
    op.create_table('reports',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('colors', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('occurred_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('geo', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location_city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('attributes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reward_offered', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_resolved', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('occurred_time', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('contact_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('additional_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('condition', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('safety_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_safe', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_urgent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('reward_amount', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('moderation_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('images', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('image_hashes', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('text_embedding', pgvector.sqlalchemy.Vector(dim=384), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='reports_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reports_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_reports_type', 'reports', ['type'], unique=False)
    op.create_index('ix_reports_status', 'reports', ['status'], unique=False)
    op.create_index('ix_reports_owner_id', 'reports', ['owner_id'], unique=False)
    op.create_index('ix_reports_location_city', 'reports', ['location_city'], unique=False)
    op.create_index('ix_reports_is_resolved', 'reports', ['is_resolved'], unique=False)
    op.create_index('ix_reports_created_at', 'reports', ['created_at'], unique=False)
    op.create_index('ix_reports_category', 'reports', ['category'], unique=False)
    op.create_table('matches',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('source_report_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('candidate_report_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('score_total', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('score_text', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('score_image', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('score_geo', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('score_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('score_color', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['candidate_report_id'], ['reports.id'], name='matches_candidate_report_id_fkey'),
    sa.ForeignKeyConstraint(['source_report_id'], ['reports.id'], name='matches_source_report_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='matches_pkey')
    )
    op.create_index('ix_matches_status', 'matches', ['status'], unique=False)
    op.create_index('ix_matches_source_report_id', 'matches', ['source_report_id'], unique=False)
    op.create_index('ix_matches_score_total', 'matches', ['score_total'], unique=False)
    op.create_index('ix_matches_candidate_report_id', 'matches', ['candidate_report_id'], unique=False)
    op.create_table('media',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('report_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('media_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('width', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('phash_hex', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('dhash_hex', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], name='media_report_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='media_pkey')
    )
    op.create_index('ix_media_report_id', 'media', ['report_id'], unique=False)
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_table('audit_logs')
    # ### end Alembic commands ###
