name: Lost & Found CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: "0 2 * * *"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================================================
  # Code Quality and Security Checks
  # ================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: apps/admin/package-lock.json

      - name: Install Python dependencies
        run: |
          cd services/api
          pip install -r requirements.txt
          pip install black flake8 mypy pytest pytest-cov bandit safety

      - name: Install Node.js dependencies
        run: |
          cd apps/admin
          npm ci

      - name: Python code formatting (Black)
        run: |
          cd services/api
          black --check --diff .

      - name: Python linting (Flake8)
        run: |
          cd services/api
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Python type checking (MyPy)
        run: |
          cd services/api
          mypy . --ignore-missing-imports

      - name: Python security scan (Bandit)
        run: |
          cd services/api
          bandit -r . -f json -o bandit-report.json || true

      - name: Python dependency security scan (Safety)
        run: |
          cd services/api
          safety check --json --output safety-report.json || true

      - name: Node.js linting (ESLint)
        run: |
          cd apps/admin
          npm run lint

      - name: Node.js security audit
        run: |
          cd apps/admin
          npm audit --audit-level=moderate

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            services/api/bandit-report.json
            services/api/safety-report.json

  # ================================================================
  # API Service Tests
  # ================================================================
  api-tests:
    name: API Service Tests
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: pgvector/pgvector:pg18
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lostfound_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd services/api
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx

      - name: Run API tests
        run: |
          cd services/api
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: api-coverage
          path: services/api/coverage.xml

  # ================================================================
  # NLP Service Tests
  # ================================================================
  nlp-tests:
    name: NLP Service Tests
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd services/nlp
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Download NLTK data
        run: |
          cd services/nlp
          python -c "import nltk; nltk.download('punkt'); nltk.download('stopwords'); nltk.download('wordnet')"

      - name: Run NLP tests
        run: |
          cd services/nlp
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

  # ================================================================
  # Vision Service Tests
  # ================================================================
  vision-tests:
    name: Vision Service Tests
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

      - name: Install dependencies
        run: |
          cd services/vision
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run Vision tests
        run: |
          cd services/vision
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

  # ================================================================
  # Admin Panel Tests
  # ================================================================
  admin-tests:
    name: Admin Panel Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: apps/admin/package-lock.json

      - name: Install dependencies
        run: |
          cd apps/admin
          npm ci

      - name: Run type checking
        run: |
          cd apps/admin
          npm run type-check

      - name: Run tests
        run: |
          cd apps/admin
          npm test -- --coverage --watchAll=false

      - name: Build application
        run: |
          cd apps/admin
          npm run build

  # ================================================================
  # Integration Tests
  # ================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [api-tests, nlp-tests, vision-tests, admin-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          cd infra/compose
          cp env.example .env
          docker-compose up -d --build

      - name: Wait for services to be ready
        run: |
          sleep 30
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8000/v1/health || exit 1
          curl -f http://localhost:8001/health || exit 1
          curl -f http://localhost:8002/health || exit 1

      - name: Run integration tests
        run: |
          cd services/api
          pip install pytest pytest-asyncio httpx
          pytest tests/integration/ -v

      - name: Test network connectivity
        run: |
          ./infra/compose/test-network-connectivity.sh

      - name: Stop services
        run: |
          cd infra/compose
          docker-compose down -v

  # ================================================================
  # Build and Push Docker Images
  # ================================================================
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [api-tests, nlp-tests, vision-tests, admin-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nlp
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/vision
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: services/api
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push NLP image
        uses: docker/build-push-action@v5
        with:
          context: services/nlp
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nlp:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Vision image
        uses: docker/build-push-action@v5
        with:
          context: services/vision
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/vision:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Admin image
        uses: docker/build-push-action@v5
        with:
          context: apps/admin
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ================================================================
  # Security Scanning
  # ================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  # ================================================================
  # Performance Tests
  # ================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install locust pytest-benchmark

      - name: Start services for performance testing
        run: |
          cd infra/compose
          cp env.example .env
          docker-compose up -d --build
          sleep 60

      - name: Run performance tests
        run: |
          cd services/api
          locust -f tests/performance/locustfile.py --headless -u 100 -r 10 -t 60s --html performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: services/api/performance-report.html

  # ================================================================
  # Deployment (Production)
  # ================================================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment script here
          # This could be:
          # - Kubernetes deployment
          # - Docker Swarm deployment
          # - Cloud provider deployment (AWS, GCP, Azure)
          # - Custom deployment script

      - name: Notify deployment success
        run: |
          echo "Deployment successful!"
          # Add notification logic here (Slack, Discord, email, etc.)

  # ================================================================
  # Cleanup
  # ================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Cleanup Docker images
        run: |
          docker system prune -af
          docker volume prune -f
