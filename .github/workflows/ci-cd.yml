name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

env:
    PYTHON_VERSION: "3.11"
    NODE_VERSION: "18"

jobs:
    # ============================================================================
    # Backend Tests & Quality Checks
    # ============================================================================
    backend-tests:
        name: Backend Tests & Linting
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgis/postgis:16-3.4
                env:
                    POSTGRES_DB: lostfound_test
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            redis:
                image: redis:7-alpine
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev,api]"
                  pip install pytest pytest-cov pytest-asyncio

            - name: Run Ruff Linter
              run: |
                  ruff check backend/api/app --output-format=github
              continue-on-error: true

            - name: Run Black Formatter Check
              run: |
                  black --check backend/api/app
              continue-on-error: true

            - name: Run MyPy Type Checker
              run: |
                  mypy backend/api/app --ignore-missing-imports
              continue-on-error: true

            - name: Run Tests with Coverage
              env:
                  DATABASE_URL: postgresql://test:test@localhost:5432/lostfound_test
                  REDIS_URL: redis://localhost:6379/0
                  JWT_SECRET: test_secret_key_for_ci_testing_only
                  ADMIN_EMAIL: admin@test.com
                  ADMIN_PASSWORD: TestPassword123!
                  ENV: test
              run: |
                  pytest tests/ -v --cov=backend/api/app --cov-report=xml --cov-report=html --cov-report=term

            - name: Upload Coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: backend
                  name: backend-coverage

            - name: Check Test Coverage Threshold
              run: |
                  coverage report --fail-under=60

    # ============================================================================
    # Frontend Web Admin Tests
    # ============================================================================
    frontend-web-tests:
        name: Web Admin Tests & Linting
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"
                  cache-dependency-path: frontend/web-admin/package-lock.json

            - name: Install dependencies
              run: |
                  cd frontend/web-admin
                  npm ci

            - name: Run ESLint
              run: |
                  cd frontend/web-admin
                  npm run lint
              continue-on-error: true

            - name: Run Type Check
              run: |
                  cd frontend/web-admin
                  npm run type-check

            - name: Run Tests
              run: |
                  cd frontend/web-admin
                  npm test -- --coverage
              continue-on-error: true

            - name: Build
              run: |
                  cd frontend/web-admin
                  npm run build

    # ============================================================================
    # Mobile App Tests (Flutter)
    # ============================================================================
    mobile-tests:
        name: Mobile App Tests
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: "3.19.x"
                  channel: "stable"

            - name: Install dependencies
              run: |
                  cd frontend/mobile
                  flutter pub get

            - name: Run Flutter Analyze
              run: |
                  cd frontend/mobile
                  flutter analyze

            - name: Run Tests
              run: |
                  cd frontend/mobile
                  flutter test --coverage

            - name: Upload Coverage
              uses: codecov/codecov-action@v3
              with:
                  file: frontend/mobile/coverage/lcov.info
                  flags: mobile
                  name: mobile-coverage

    # ============================================================================
    # Security Scanning
    # ============================================================================
    security-scan:
        name: Security Scanning
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"
                  severity: "CRITICAL,HIGH"

            - name: Upload Trivy results to GitHub Security
              uses: github/codeql-action/upload-sarif@v2
              with:
                  sarif_file: "trivy-results.sarif"

            - name: Run Snyk Security Scan
              uses: snyk/actions/python@master
              continue-on-error: true
              env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                  args: --severity-threshold=high

    # ============================================================================
    # Docker Build & Push
    # ============================================================================
    docker-build:
        name: Build Docker Images
        runs-on: ubuntu-latest
        needs: [backend-tests, frontend-web-tests, security-scan]
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: |
                      ${{ secrets.DOCKER_USERNAME }}/lost-found-api
                  tags: |
                      type=ref,event=branch
                      type=sha,prefix={{branch}}-

            - name: Build and push API image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend/api
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lost-found-api:buildcache
                  cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lost-found-api:buildcache,mode=max

            - name: Build and push NLP image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend/nlp
                  push: true
                  tags: ${{ secrets.DOCKER_USERNAME }}/lost-found-nlp:${{ github.ref_name }}
                  cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lost-found-nlp:buildcache
                  cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lost-found-nlp:buildcache,mode=max

            - name: Build and push Vision image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend/vision
                  push: true
                  tags: ${{ secrets.DOCKER_USERNAME }}/lost-found-vision:${{ github.ref_name }}
                  cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lost-found-vision:buildcache
                  cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/lost-found-vision:buildcache,mode=max

    # ============================================================================
    # Deploy to Staging
    # ============================================================================
    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: [docker-build]
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        environment:
            name: staging
            url: https://staging.lostfound.example.com

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to staging
              run: |
                  echo "Deploying to staging environment..."
                  # Add your deployment commands here
                  # Example: kubectl set image deployment/api api=${{ secrets.DOCKER_USERNAME }}/lost-found-api:develop

    # ============================================================================
    # Deploy to Production
    # ============================================================================
    deploy-production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: [docker-build]
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        environment:
            name: production
            url: https://lostfound.example.com

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to production
              run: |
                  echo "Deploying to production environment..."
                  # Add your deployment commands here
                  # Example: kubectl set image deployment/api api=${{ secrets.DOCKER_USERNAME }}/lost-found-api:main
