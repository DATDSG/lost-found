# ================================================================
# Lost & Found - Domain-Driven Design Docker Compose
# ================================================================
# Enhanced compose file optimized for DDD architecture
# Includes improved configuration, security, and reliability
# ================================================================

services:
  # Database with PostGIS support
  db:
    image: postgis/postgis:16-3.4
    container_name: lost-found-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-lostfound}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-lostfound}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: lost-found-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-LF_Redis_2025_Pass!} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.25"

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    container_name: lost-found-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # API Service - Domain-Driven Design Architecture
  api:
    build:
      context: ../../services/api
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=${ENVIRONMENT:-development}
    container_name: lost-found-api
    environment:
      # Database configuration
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-lostfound}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-20}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      - DB_ECHO=${DB_ECHO:-false}

      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-LF_Redis_2025_Pass!}@redis:6379/0
      - REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS:-20}

      # MinIO configuration
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin123}
      - MINIO_SECURE=false

      # JWT configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-super-secret-jwt-key-change-me-in-production}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}

      # Service URLs
      - NLP_SERVICE_URL=http://nlp:8001
      - VISION_SERVICE_URL=http://vision:8002

      # CORS configuration
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:8080,http://localhost:8000,http://localhost:8001,http://localhost:8002,http://admin:3000,http://10.0.2.2:3000,http://10.0.2.2:8080,http://10.0.2.2:8000,http://10.0.2.2:8001,http://10.0.2.2:8002,http://172.104.40.189:3000,http://172.104.40.189:8080,http://172.104.40.189:8000,http://172.104.40.189:8001,http://172.104.40.189:8002

      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}

      # Domain-specific settings
      - REPORTS_PER_PAGE=${REPORTS_PER_PAGE:-20}
      - MATCHES_PER_PAGE=${MATCHES_PER_PAGE:-20}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES:-image/jpeg,image/png,image/webp}

      # Monitoring
      - METRICS_ENABLED=${METRICS_ENABLED:-true}

      # Performance optimization
      - ENABLE_RESPONSE_CACHE=${ENABLE_RESPONSE_CACHE:-true}
      - RESPONSE_CACHE_TTL=${RESPONSE_CACHE_TTL:-300}
      - ENABLE_COMPRESSION=${ENABLE_COMPRESSION:-true}
    ports:
      - "0.0.0.0:${API_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - api_uploads:/app/uploads
      - api_logs:/app/logs
      - api_cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Worker Service for background tasks
  worker:
    build:
      context: ../../services/api
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=${ENVIRONMENT:-development}
    container_name: lost-found-worker
    command: python -m arq app.worker.WorkerSettings
    environment:
      # Database configuration
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-lostfound}

      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-LF_Redis_2025_Pass!}@redis:6379/1

      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_uploads:/app/uploads
      - api_logs:/app/logs
      - api_cache:/app/cache
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'python -c ''import redis; r = redis.Redis.from_url("redis://:${REDIS_PASSWORD:-LF_Redis_2025_Pass!}@redis:6379/1"); exit(0 if r.ping() else 1)''',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # NLP Service - Enhanced for DDD
  nlp:
    build:
      context: ../../services/nlp
      dockerfile: Dockerfile
    container_name: lost-found-nlp
    environment:
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-LF_Redis_2025_Pass!}@redis:6379/2
      - REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS:-10}

      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app

      # NLP-specific settings
      - SIMILARITY_THRESHOLD=${SIMILARITY_THRESHOLD:-0.7}
      - FUZZY_MATCH_THRESHOLD=${FUZZY_MATCH_THRESHOLD:-80}
      - MAX_MATCHES=${MAX_MATCHES:-10}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
      - MAX_TEXT_LENGTH=${MAX_TEXT_LENGTH:-10000}
    ports:
      - "${NLP_PORT:-8001}:8001"
    volumes:
      - nlp_cache:/app/cache
      - nlp_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Vision Service - Enhanced for DDD
  vision:
    build:
      context: ../../services/vision
      dockerfile: Dockerfile
    container_name: lost-found-vision
    environment:
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-LF_Redis_2025_Pass!}@redis:6379/3
      - REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS:-10}

      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app

      # Vision-specific settings
      - SIMILARITY_THRESHOLD=${SIMILARITY_THRESHOLD:-0.8}
      - HASH_THRESHOLD_SIMILAR=${HASH_THRESHOLD_SIMILAR:-10}
      - HASH_THRESHOLD_MATCH=${HASH_THRESHOLD_MATCH:-5}
      - MAX_MATCHES=${MAX_MATCHES:-20}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
      - MAX_IMAGE_SIZE=${MAX_IMAGE_SIZE:-10485760}
      - MAX_IMAGE_DIMENSION=${MAX_IMAGE_DIMENSION:-4096}

      # OpenCV settings
      - OPENCV_IO_ENABLE_OPENEXR=1
      - OPENCV_IO_ENABLE_JASPER=1
    ports:
      - "${VISION_PORT:-8002}:8002"
    volumes:
      - vision_cache:/app/cache
      - vision_logs:/app/logs
      - vision_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # pgAdmin - Database Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lost-found-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@lostfound.com
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-postgres}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
      - PGADMIN_CONFIG_LOGIN_BANNER="Lost & Found Development Database"
      - PYTHONWARNINGS=ignore
      - PYTHONDONTWRITEBYTECODE=1
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Admin Panel - Next.js Frontend
  admin:
    build:
      context: ../../apps/admin
      dockerfile: Dockerfile
    container_name: lost-found-admin
    environment:
      # API Configuration
      - NEXT_PUBLIC_API_URL=http://api:8000
      - NEXT_PUBLIC_API_VERSION=v1

      # Authentication
      - NEXT_PUBLIC_AUTH_ENABLED=true
      - NEXT_PUBLIC_JWT_SECRET=${JWT_SECRET_KEY:-super-secret-jwt-key-change-me-in-production}

      # Feature Flags
      - NEXT_PUBLIC_FRAUD_DETECTION_ENABLED=true
      - NEXT_PUBLIC_AUDIT_LOGS_ENABLED=true
      - NEXT_PUBLIC_MATCHING_ENABLED=true
      - NEXT_PUBLIC_REPORTS_ENABLED=true
      - NEXT_PUBLIC_USERS_ENABLED=true

      # Development Settings
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_DEBUG_MODE=${DEBUG:-true}

      # UI Configuration
      - NEXT_PUBLIC_APP_NAME=Lost & Found Admin
      - NEXT_PUBLIC_APP_VERSION=1.0.0

      # Pagination Settings
      - NEXT_PUBLIC_DEFAULT_PAGE_SIZE=20
      - NEXT_PUBLIC_MAX_PAGE_SIZE=100

      # File Upload Settings
      - NEXT_PUBLIC_MAX_FILE_SIZE=10485760
      - NEXT_PUBLIC_ALLOWED_FILE_TYPES=image/jpeg,image/png,image/webp

      # Monitoring
      - NEXT_PUBLIC_ANALYTICS_ENABLED=false
      - NEXT_PUBLIC_ERROR_REPORTING_ENABLED=false
    ports:
      - "${ADMIN_PORT:-3000}:3000"
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - admin_logs:/app/logs
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://127.0.0.1:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lost-found-nginx
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      api:
        condition: service_healthy
      admin:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - lost-found-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"
        reservations:
          memory: 64M
          cpus: "0.1"

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  api_uploads:
    driver: local
  api_logs:
    driver: local
  api_cache:
    driver: local
  nlp_cache:
    driver: local
  nlp_logs:
    driver: local
  vision_cache:
    driver: local
  vision_logs:
    driver: local
  vision_uploads:
    driver: local
  pgadmin_data:
    driver: local
  admin_logs:
    driver: local

networks:
  lost-found-network:
    driver: bridge
